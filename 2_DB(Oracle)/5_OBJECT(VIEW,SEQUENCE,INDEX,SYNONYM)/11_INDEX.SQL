-- INDEX

-- SQL문의 처리 속도를 향상시키기 위해서 
-- 컬럼에 대해 생성하는 오라클 객체




-- 1. 인덱스 생성방법
/* [표현식]
CREATE [UNIQUE] INDEX 인덱스명
ON 테이블명(컬럼명, 컬럼명,... | 함수명, 함수계산식);
    
    
    --컬럼에 적용하는 것이기 때문에 테이블 위에 설정
*/
-- 사용자가 정의한 인덱스를 관리하는 데이터 딕셔너리
SELECT * FROM USER_IND_COLUMNS;

-- 인덱스는 위 표현식으로 일일히 생성 가능하지만
-- PRIMARY KEY , UNIQUE 제약조건 설정시 자동으로 같이 생성됨.

------------------------------------------------------------------------------------------

-- 2. 인덱스의 구조

/* 
    ROWID : DB 내 데이터 공유 주소, ROWID를 이용하여 데이터 접근 가능   

    1 ~ 6 번째 : 데이터 오브젝트 번호
    7 ~ 9 번째 : 파일 번호
    10 ~ 15 번째 : BLOCK 번호 
    16 ~ 18 번째 : ROW 번호
*/
SELECT ROWID, EMP_ID,EMP_NAME 
FROM EMPLOYEE;

------------------------------------------------------------------------------------------

-- 3. INDEXT의 원리
/*
    인덱스는 MAP 형식으로 구성이 되어 있음.
    -- MAP 형식 : KEY + VALUE 
    
    KEY = 지정한 컬럼
    VALUE = ROWID 
    -- KEY 나 주소값을 알면 해당 컬럼값으로 빠르게 찾아갈 수 있다.
    
*/

-- 인덱스를 활용한 검색
-- WHERE 절 조건에 인덱스가 부여된 컬럼을 사용함
SELECT EMP_ID, EMP_NAME 
FROM EMPLOYEE 
WHERE EMP_ID = 201;
-- 인덱스를 활용한 검색은 순차적으로 검색하는게 아니라 지정된 인덱스 값에
-- 해당하는 컬럼으로 접근하는 것.
-- 300만개 이상의 데이터에서 1이상 차이가 발생
/* EMP_ID는 PRIMARY KEY 이므로 INDEX가 자동으로 생성되어 있음
    INDEX 가 설정되어있는 컬럼을 WHERE 절 조건으로 활용하면
    해당 조건을 만족하는 컬럼을 바로 찾아가서 조회하게 됨.
    
    만약 INDEX가 설정되지 않은 컬럼을 조건으로 하여 검색하면
    해당 조건을 만족하는 컬럼을 찾기 위해 
    테이블의 모든 행을 검사하게됨 ( FULL SCAN )
    
    --> 속도 저하 발생.
    
        
*/
SELECT * FROM EMPLOYEE
WHERE EMP_NO > '0';
-- INDEX 가 설정되어있으면 자동으로 오름차순으로 정렬되어 있기 때문에 
-- SELECT 시 조건이 INDEX가 설정되어있는 컬럼을 기준으로 했을 때 실행 결과에서도 정렬되어 나타난다.





