-- DDL

-- ALTER 
-- 객체를 수정하는 구문

-- [ 표현식 ]

/*
    - 테이블 객체 수정 시
    ALTER TABLE[ / SEQUENCE] 테이블명
    수정할 내용
    
    - 수정할 내용에 들어가는 것들
    ( 공통점 ) 테이블의 구조와 관련됨
        1) 컬럼 추가 / 수정 / 삭제
        2) 제약조건 추가 / 삭제
        3) 컬럼 자료형 변경
        4) DEFAULT 값 변경
        5) 테이블 명, 컬럼 명, 제약조건 명 변경    
*/

-- 1. 컬럼 추가, 수정, 삭제 
SELECT * FROM DEPT_COPY;

-- 컬럼 추가(ADD)
ALTER TABLE DEPT_COPY
ADD (CNAME VARCHAR2(20));

SELECT * FROM DEPT_COPY;

-- 컬럼 추가 시 DEFAULT 값 지정
ALTER TABLE DEPT_COPY ADD (LNAME VARCHAR2(40) DEFAULT '한국');

SELECT * FROM DEPT_COPY;

-- 컬럼 수정(MODIFY)
ALTER TABLE DEPT_COPY 
MODIFY DEPT_ID CHAR(3)
MODIFY DEPT_TITLE VARCHAR2(30)
MODIFY LOCATION_ID VARCHAR2(2)
MODIFY CNAME CHAR(20)
MODIFY LNAME DEFAULT  '미국';

-- 컬럼수정시 주의사항 
-- 컬럼의 데이터 저장 크기를 수정할 때
-- 기존에 기록된 값 보다 작은 크기로는 변경 불가
ALTER TABLE DEPT_COPY 
MODIFY DEPT_TITLE VARCHAR2(30);

-- LNAME 컬럼 DEFAULT  값 '한국'으로 변경 하기
ALTER TABLE DEPT_COPY
MODIFY LNAME DEFAULT '한국';

INSERT  INTO DEPT_COPY
VALUES ('D11', '생산부', 'L2',NULL,DEFAULT);

SELECT * FROM DEPT_COPY;

-- 컬럼 삭제(DROP COLUMN 컬럼명)
CREATE TABLE DEPT_COPY2
AS SELECT * FROM DEPT_COPY;

SELECT * FROM DEPT_COPY2;

SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT, COLUMN_ID, COMMENTS
FROM USER_TAB_COLUMNS
NATURAL  JOIN USER_COL_COMMENTS
WHERE TABLE_NAME = 'DEPT_COPY2';
-- 테이블 복사 시 NOT NULL 제약조건만 카피
-- COLUMN_ID : 컬럼이 만들어진 순서
-- 위 구문은 DEVELOPER 환경이 아니였을 때 사용가능

-- DEPT_ID 컬럼 삭제
ALTER TABLE DEPT_COPY2 
DROP COLUMN DEPT_ID;

SELECT * FROM DEPT_COPY2;

SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT, COLUMN_ID, COMMENTS
FROM USER_TAB_COLUMNS
NATURAL  JOIN USER_COL_COMMENTS
WHERE TABLE_NAME = 'DEPT_COPY2';

-- 테이블의 모든 컬럼 삭제 
ALTER TABLE DEPT_COPY2
DROP COLUMN LOCATION_ID;

ALTER TABLE DEPT_COPY2
DROP COLUMN CNAME;

ALTER TABLE DEPT_COPY2
DROP COLUMN LNAME;

SELECT * FROM DEPT_COPY2;

ALTER TABLE DEPT_COPY2
DROP COLUMN DEPT_TITLE;
--오류 보고 -
    --ORA-12983: cannot drop all columns in a table
    --12983. 00000 -  "cannot drop all columns in a table"
    --*Cause:    An attempt was made to drop all columns in a table.
    --*Action:   Make sure at least one column remains in the table after
    --           the drop column operation.
    -- 테이블에 남아 있는 컬럼이 없다면 존재 의미가 없으므로
    -- 컬럼이 삭제가 되지 않음.
    
-- TCL이 작용할 수 있는 구문은 DML 만 가능
--> DDL인 ALTER구문은 버퍼에 저장되지 않고 바로 DB에 반영이 된다.
    --> DDL 구문에서는 ROLLBACK 불가능

-- ROLLBACK;    

SELECT * FROM DEPT_COPY2;

-- 실제 웹 게시판 게시글 삭제시 UPDATE로 삭제 (0이면 안보여주고, 1이면 보여주는 식) => 가시적 삭제


-- 제약조건이 설정되어있는 컬럼 삭제
CREATE TABLE TB1 (
    PK NUMBER PRIMARY KEY ,
    FK NUMBER REFERENCES TB1,
    COL1 NUMBER ,
    CHECK (PK > 0 AND COL1 > 0 )
    -- 한줄의 데이터가 들어왔을 때 PK, COL1이 0보다 큰값이어야지만 데이터 삽입 가능
    -- TB1 테이블에는 4개(PK,FK,CHECK)의 제약조건 설정되어 있는 것
    --> 하나의 제약조건구문으로 2개의 제약조건이 설정되었다.
);

SELECT * FROM TB1;

-- 테이블에 설정된 제약조건 확인
SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'TB1';

-- PK 컬럼 삭제
ALTER TABLE TB1
DROP COLUMN PK;
--오류 보고 -
    --ORA-12992: cannot drop parent key column
    --12992. 00000 -  "cannot drop parent key column"
    --*Cause:    An attempt was made to drop a parent key column.
    --*Action:   Drop all constraints referencing the parent key column, or
    --           specify CASCADE CONSTRAINTS in statement.
-- PK 가 FK를 참조 하고 있기 때문에 PK 삭제시 참조 무결성 위배
--> CASCADE CONSTRAINT (종속 무결성) 삭제하라고 알림중

-- 종속 제약조건 (FK) 와 함께 PK컬럼 삭제
ALTER TABLE TB1
DROP COLUMN PK CASCADE CONSTRAINTS;


-- 테이블에 설정된 제약조건 확인
SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'TB1';
--> PK 컬럼의 제약조건 삭제시 연계되어있는 PK, CHECK(PK, COL1) 제약 조건 3개가 삭제된다.
-- CASCADE CONSTRAINTS  옵션 : 종속 되어있는 제약 조건 삭제로 PK에 종속되어있던 FK의 제약조건도 삭제 
-- > 총 4개의 제약조건 모두 삭제


----------------------------------------------------------------------

-- 2. 제약조건 추가 / 삭제 

-- DEPT_COPY 테이블의 제약조건 확인
SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';

-- 컬럼 제약조건 추가(ADD CONSTRAINT)
ALTER TABLE DEPT_COPY 
ADD CONSTRAINT DCOPY_DID_PK PRIMARY KEY (DEPT_ID)
ADD CONSTRAINT DCOPY_DTITLE_UNQ UNIQUE (DEPT_TITLE)
-- > SQL 구문은 정상이지만 SQL DEVELOPER 오류로 인하여
-- 빨간줄이 보임
MODIFY LNAME CONSTRAINT DCOPY_LNAME_NN NOT NULL ;

-- DEPT_COPY 테이블의 제약조건 확인
SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';
-- NOT NULL 만 CONSTRAINT_TYPE 이 C, SEARCH_CONDITION 은 "LNAME" IS NOT NULL 
-- 나머지는 P, U 이고 SEARCH_CONDITION 은 (NULL)
-- 자동적으로 추가되는 제약조건으로 C, "DEPT_ID" IS NOT NULL, C, "LOCATION_ID"IS NOT NULL



-- 제약조건 삭제(DROP CONSTRAINT 제약조건명)
ALTER TABLE DEPT_COPY
DROP CONSTRAINT DCOPY_DID_PK;

-- DEPT_COPY 테이블의 제약조건 확인
SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';
-- PK 제약조건을 삭제해도 NOT NULL 체크하는 제약조건은 안빠짐 


-- DEPT_COPY 테이블에 있는 모든 제약조건 삭제
ALTER TABLE DEPT_COPY 
DROP CONSTRAINT DCOPY_DTITLE_UNQ
DROP CONSTRAINT DCOPY_LNAME_NN
DROP CONSTRAINT SYS_C007168
DROP CONSTRAINT SYS_C007169
;

-- 컬럼에 NULL 값이 저장될 수 있게 수정
ALTER TABLE DEPT_COPY 
MODIFY LNAME CONSTRAINT DCOPY_LNAME_NN NOT NULL ;

ALTER TABLE DEPT_COPY
MODIFY  LNAME NULL;
--> NOT NULL 제약조건 삭제됨

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';


----------------------------------------------------------------------

-- 3. 컬럼명, 제약조건명, 테이블명 변경하기 

-- 컬럼명 변경(RENAME COLUMN 컬럼명 TO 변경명)
SELECT * FROM DEPT_COPY;

ALTER TABLE DEPT_COPY 
RENAME COLUMN DEPT_TITLE 
TO DEPT_NAME;

SELECT * FROM DEPT_COPY;

-- 제약조건명 변경(RENAME CONSTRAINT 제약조건명 TO 변경명)

ALTER TABLE DEPT_COPY 
ADD CONSTRAINT DCOPY_DID_PK PRIMARY KEY (DEPT_ID)
ADD CONSTRAINT DCOPY_DTITLE_UNQ UNIQUE (DEPT_NAME)
MODIFY LNAME CONSTRAINT DCOPY_LN NOT NULL;


SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';

-- DCOPY_DTITLE_UNQ 제약조건을
-- DCOPY_DNAME_UNQ 로 이름 변경
ALTER TABLE DEPT_COPY 
RENAME CONSTRAINT DCOPY_DTITLE_UNQ TO DCOPY_DNAME_UNQ;

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';

-- 테이블명 변경(RENAME 테이블명 TO 변경명)
--> DEPT_COPY 테이블 DEPT_TEST 로 이름 변경
ALTER TABLE DEPT_COPY
RENAME TO DEPT_TEST;

SELECT * FROM DEPT_COPY;
--> 테이블명이 변경되어 조회시 없다고 오류 발생

SELECT * FROM DEPT_TEST;


----------------------------------------------------------------------

-- DROP
-- 데이터베이스 객체를 삭제하는 구문

-- 테이블 삭제(DROP TABLE 테이블명)
-- TB1 테이블 삭제
DROP TABLE TB1;

SELECT * FROM TB1;

-- DEPT_TEST
DROP TABLE DEPT_TEST;

CREATE TABLE EMP_COPY
AS SELECT * FROM EMPLOYEE;

CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

SELECT * FROM DEPT_COPY;
SELECT * FROM EMP_COPY;

-- EMP_CODE -> PK
ALTER TABLE EMP_COPY
ADD CONSTRAINT EMP_PK  PRIMARY KEY (EMP_ID);
-- DEPT_ID -> PK
ALTER TABLE DEPT_COPY
ADD CONSTRAINT DEPT_PK  PRIMARY KEY (DEPT_ID);

-- DEPT_COPY FOREIGN KEY 추가
ALTER TABLE DEPT_COPY
ADD CONSTRAINT DEPT_FK  FOREIGN KEY (DEPT_ID) REFERENCES EMP_COPY(EMP_ID);


-- DEPT_COPY FOREIGN KEY 추가
ALTER TABLE DEPT_COPY
DROP CONSTRAINT DEPT_FK
DROP CONSTRAINT SYS_C007194
DROP CONSTRAINT SYS_C007195
;

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'EMP_COPY';

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';
-- DEPT_COPY FK => R

DROP TABLE DEPT_COPY ;
--> FK 제약조건 때문에 삭제 불가
--> EMP_COPY의 FOREIGN KEY 제약조건에 의하여 삭제가 불가능함

-- EMP_COPY의 FOREIGN KEY 제약조건과 함께 
-- DEPT_COPY 테이블 삭제하기
DROP TABLE DEPT_COPY
CASCADE CONSTRAINT ;

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'EMP_COPY';
--> R -> C 로 변경
-- > 관계지어져있는 상태에서 한쪽 제약조건을 삭제하면 다른 한쪽의 제약조건도 같이 삭제된다.
--> PK - FK 관계일 때 FK 제약조건 삭제시 PK의 제약조건 삭제됨 

SELECT * FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC USING(CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'DEPT_COPY';


SELECT STUDENT_NO, STUDENT_NAME
FROM
    (SELECT STUDENT_NO, STUDENT_NAME, AVG(POINT) 평점
    FROM TB_GRADE
    JOIN TB_STUDENT USING(STUDENT_NO)
    WHERE DEPARTMENT_NO 
        = (SELECT DEPARTMENT_NO
            FROM TB_DEPARTMENT
            WHERE DEPARTMENT_NAME = '국어국문학과')
    GROUP BY STUDENT_NO, STUDENT_NAME
    ORDER BY 평점 DESC)
WHERE ROWNUM = 1;
